# Generated by Django 5.2.6 on 2025-09-27 07:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('customer_type', models.CharField(choices=[('individual', 'Particulier'), ('company', 'Entreprise'), ('reseller', 'Revendeur'), ('government', 'Gouvernement'), ('ngo', 'ONG')], default='company', max_length=20, verbose_name='Type de client')),
                ('customer_code', models.CharField(max_length=20, unique=True, verbose_name='Code client')),
                ('company_name', models.CharField(blank=True, max_length=200, verbose_name="Nom de l'entreprise")),
                ('contact_name', models.CharField(max_length=100, verbose_name='Nom du contact principal')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('address', models.TextField(verbose_name='Adresse')),
                ('city', models.CharField(max_length=100, verbose_name='Ville')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Code postal')),
                ('country', models.CharField(default="Côte d'Ivoire", max_length=50, verbose_name='Pays')),
                ('tax_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro fiscal')),
                ('acquisition_date', models.DateField(default=django.utils.timezone.now, verbose_name="Date d'acquisition")),
                ('acquisition_channel', models.CharField(choices=[('direct', 'Vente directe'), ('reseller', 'Revendeur'), ('online', 'En ligne'), ('referral', 'Référence'), ('marketing', 'Campagne marketing')], default='direct', max_length=50, verbose_name="Canal d'acquisition")),
                ('total_licenses', models.IntegerField(default=0, verbose_name='Nombre total de licences')),
                ('active_licenses', models.IntegerField(default=0, verbose_name='Licences actives')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name="Chiffre d'affaires total")),
            ],
            options={
                'verbose_name': 'Client licence',
                'verbose_name_plural': 'Clients licence',
                'db_table': 'licensing_customer',
                'ordering': ['company_name', 'contact_name'],
            },
        ),
        migrations.CreateModel(
            name='LicenseMetrics',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('period_date', models.DateField(unique=True, verbose_name='Date de la période')),
                ('total_licenses', models.IntegerField(default=0, verbose_name='Total des licences')),
                ('active_licenses', models.IntegerField(default=0, verbose_name='Licences actives')),
                ('expired_licenses', models.IntegerField(default=0, verbose_name='Licences expirées')),
                ('suspended_licenses', models.IntegerField(default=0, verbose_name='Licences suspendues')),
                ('starter_licenses', models.IntegerField(default=0, verbose_name='Licences Starter')),
                ('professional_licenses', models.IntegerField(default=0, verbose_name='Licences Professional')),
                ('enterprise_licenses', models.IntegerField(default=0, verbose_name='Licences Enterprise')),
                ('daily_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='CA quotidien')),
                ('monthly_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='CA mensuel')),
                ('yearly_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='CA annuel')),
                ('total_violations', models.IntegerField(default=0, verbose_name='Total violations')),
                ('critical_violations', models.IntegerField(default=0, verbose_name='Violations critiques')),
            ],
            options={
                'verbose_name': 'Métriques de licence',
                'verbose_name_plural': 'Métriques de licence',
                'db_table': 'licensing_metrics',
                'ordering': ['-period_date'],
            },
        ),
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('level', models.CharField(choices=[('starter', 'Starter'), ('professional', 'Professional'), ('enterprise', 'Enterprise'), ('custom', 'Personnalisée')], max_length=20, unique=True, verbose_name='Niveau de licence')),
                ('max_users', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name="Nombre maximum d'utilisateurs")),
                ('max_articles', models.IntegerField(blank=True, help_text='NULL = illimité', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name="Nombre maximum d'articles")),
                ('max_transactions_per_month', models.IntegerField(blank=True, help_text='NULL = illimité', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Transactions max par mois')),
                ('max_storage_mb', models.IntegerField(blank=True, help_text='NULL = illimité', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Stockage maximum (MB)')),
                ('modules_included', models.JSONField(default=list, help_text='Liste des modules autorisés', verbose_name='Modules inclus')),
                ('features_included', models.JSONField(default=list, help_text='Liste des fonctionnalités autorisées', verbose_name='Fonctionnalités incluses')),
                ('support_level', models.CharField(choices=[('basic', 'Support de base'), ('standard', 'Support standard'), ('priority', 'Support prioritaire'), ('premium', 'Support premium 24/7')], default='basic', max_length=20, verbose_name='Niveau de support')),
                ('allows_sync', models.BooleanField(default=True, verbose_name='Synchronisation autorisée')),
                ('allows_multi_site', models.BooleanField(default=False, verbose_name='Multi-sites autorisé')),
                ('allows_api_access', models.BooleanField(default=False, verbose_name='Accès API autorisé')),
                ('price_monthly', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Prix mensuel')),
                ('price_yearly', models.DecimalField(decimal_places=2, default=0, max_digits=8, verbose_name='Prix annuel')),
                ('default_duration_days', models.IntegerField(default=365, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Durée par défaut (jours)')),
            ],
            options={
                'verbose_name': 'Type de licence',
                'verbose_name_plural': 'Types de licence',
                'db_table': 'licensing_license_type',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('license_key', models.CharField(help_text='Clé unique générée automatiquement', max_length=64, unique=True, verbose_name='Clé de licence')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('active', 'Active'), ('suspended', 'Suspendue'), ('expired', 'Expirée'), ('revoked', 'Révoquée'), ('terminated', 'Résiliée')], default='pending', max_length=20, verbose_name='Statut')),
                ('issued_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Émise le')),
                ('activated_at', models.DateTimeField(blank=True, null=True, verbose_name='Activée le')),
                ('expires_at', models.DateTimeField(verbose_name='Expire le')),
                ('custom_max_users', models.IntegerField(blank=True, null=True, verbose_name='Utilisateurs max (personnalisé)')),
                ('custom_modules', models.JSONField(blank=True, default=list, verbose_name='Modules personnalisés')),
                ('custom_features', models.JSONField(blank=True, default=list, verbose_name='Fonctionnalités personnalisées')),
                ('installation_name', models.CharField(blank=True, help_text='Nom donné à cette installation', max_length=100, verbose_name="Nom de l'installation")),
                ('hardware_fingerprint', models.CharField(blank=True, help_text='Identifiant unique du matériel', max_length=64, verbose_name='Empreinte matérielle')),
                ('purchase_date', models.DateField(default=django.utils.timezone.now, verbose_name="Date d'achat")),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name="Prix d'achat")),
                ('invoice_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de facture')),
                ('maintenance_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Maintenance expire le')),
                ('support_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Support expire le')),
                ('notes', models.TextField(blank=True, verbose_name='Notes internes')),
                ('license_signature', models.TextField(blank=True, help_text='Signature cryptographique pour validation', verbose_name='Signature de licence')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='licenses', to='licensing.customer', verbose_name='Client')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('license_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='licensing.licensetype', verbose_name='Type de licence')),
            ],
            options={
                'verbose_name': 'Licence',
                'verbose_name_plural': 'Licences',
                'db_table': 'licensing_license',
                'ordering': ['-issued_at'],
            },
        ),
        migrations.CreateModel(
            name='LicenseActivation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('status', models.CharField(choices=[('success', 'Réussie'), ('failed', 'Échouée'), ('blocked', 'Bloquée'), ('revoked', 'Révoquée')], max_length=20, verbose_name='Statut')),
                ('hardware_fingerprint', models.CharField(max_length=64, verbose_name='Empreinte matérielle')),
                ('machine_name', models.CharField(blank=True, max_length=100, verbose_name='Nom de la machine')),
                ('os_info', models.CharField(blank=True, max_length=200, verbose_name='Informations OS')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('gestore_version', models.CharField(blank=True, max_length=20, verbose_name='Version GESTORE')),
                ('activation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date d'activation")),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True, verbose_name='Dernier heartbeat')),
                ('failure_reason', models.TextField(blank=True, verbose_name="Raison de l'échec")),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activations', to='licensing.license', verbose_name='Licence')),
            ],
            options={
                'verbose_name': 'Activation de licence',
                'verbose_name_plural': 'Activations de licence',
                'db_table': 'licensing_activation',
                'ordering': ['-activation_date'],
            },
        ),
        migrations.CreateModel(
            name='LicenseRenewal',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('renewal_type', models.CharField(choices=[('renewal', 'Renouvellement'), ('upgrade', 'Mise à niveau'), ('downgrade', 'Rétrogradation'), ('extension', 'Extension')], max_length=20, verbose_name='Type de renouvellement')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('processed', 'Traité')], default='pending', max_length=20, verbose_name='Statut')),
                ('new_duration_days', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nouvelle durée (jours)')),
                ('renewal_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix de renouvellement')),
                ('discount_applied', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Remise appliquée (%)')),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Demandé le')),
                ('effective_date', models.DateTimeField(verbose_name="Date d'effet")),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('new_license', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='renewal_source', to='licensing.license', verbose_name='Nouvelle licence générée')),
                ('original_license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renewals', to='licensing.license', verbose_name='Licence originale')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('new_license_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='licensing.licensetype', verbose_name='Nouveau type de licence')),
            ],
            options={
                'verbose_name': 'Renouvellement de licence',
                'verbose_name_plural': 'Renouvellements de licence',
                'db_table': 'licensing_renewal',
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='LicenseUsage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('active_users', models.IntegerField(default=0, verbose_name='Utilisateurs actifs')),
                ('peak_users', models.IntegerField(default=0, verbose_name="Pic d'utilisateurs")),
                ('total_articles', models.IntegerField(default=0, verbose_name="Nombre d'articles")),
                ('transactions_count', models.IntegerField(default=0, verbose_name='Nombre de transactions')),
                ('sales_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Montant des ventes')),
                ('storage_used_mb', models.IntegerField(default=0, verbose_name='Stockage utilisé (MB)')),
                ('modules_used', models.JSONField(default=list, help_text='Liste des modules utilisés pendant cette période', verbose_name='Modules utilisés')),
                ('features_used', models.JSONField(default=list, verbose_name='Fonctionnalités utilisées')),
                ('avg_response_time_ms', models.IntegerField(blank=True, null=True, verbose_name='Temps de réponse moyen (ms)')),
                ('error_count', models.IntegerField(default=0, verbose_name="Nombre d'erreurs")),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_stats', to='licensing.license', verbose_name='Licence')),
            ],
            options={
                'verbose_name': 'Utilisation de licence',
                'verbose_name_plural': 'Utilisations de licence',
                'db_table': 'licensing_usage',
                'ordering': ['-period_end'],
            },
        ),
        migrations.CreateModel(
            name='LicenseViolation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('violation_type', models.CharField(choices=[('user_limit', 'Dépassement utilisateurs'), ('article_limit', 'Dépassement articles'), ('transaction_limit', 'Dépassement transactions'), ('storage_limit', 'Dépassement stockage'), ('module_unauthorized', 'Module non autorisé'), ('feature_unauthorized', 'Fonctionnalité non autorisée'), ('hardware_change', 'Changement de matériel'), ('multiple_activation', 'Activation multiple'), ('expired_license', 'Licence expirée'), ('revoked_license', 'Licence révoquée')], max_length=30, verbose_name='Type de violation')),
                ('severity', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('critical', 'Critique')], max_length=10, verbose_name='Gravité')),
                ('description', models.TextField(verbose_name='Description')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Détails techniques')),
                ('is_resolved', models.BooleanField(default=False, verbose_name='Résolue')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Résolue le')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notes de résolution')),
                ('auto_action_taken', models.CharField(blank=True, max_length=50, verbose_name='Action automatique prise')),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='violations', to='licensing.license', verbose_name='Licence')),
            ],
            options={
                'verbose_name': 'Violation de licence',
                'verbose_name_plural': 'Violations de licence',
                'db_table': 'licensing_violation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['license_key'], name='licensing_l_license_21491c_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['customer', 'status'], name='licensing_l_custome_5bb12c_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['status', 'expires_at'], name='licensing_l_status_cb2609_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='licenseusage',
            unique_together={('license', 'period_start', 'period_end')},
        ),
    ]
