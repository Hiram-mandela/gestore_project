# Generated by Django 5.2.6 on 2025-09-27 07:51

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/', verbose_name='Logo')),
                ('website', models.URLField(blank=True, verbose_name='Site web')),
            ],
            options={
                'verbose_name': 'Marque',
                'verbose_name_plural': 'Marques',
                'db_table': 'inventory_brand',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('code', models.CharField(help_text='Code unique identifiant cet élément', max_length=50, unique=True, verbose_name='Code')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('contact_person', models.CharField(blank=True, max_length=100, verbose_name='Personne de contact')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Fournisseur',
                'verbose_name_plural': 'Fournisseurs',
                'db_table': 'inventory_supplier',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('symbol', models.CharField(help_text="Symbole ou abréviation de l'unité (ex: kg, L, pcs)", max_length=10, unique=True, verbose_name='Symbole')),
                ('is_decimal', models.BooleanField(default=False, help_text='Permet les quantités décimales pour cette unité', verbose_name='Décimale autorisée')),
            ],
            options={
                'verbose_name': 'Unité de mesure',
                'verbose_name_plural': 'Unités de mesure',
                'db_table': 'inventory_unit_of_measure',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('code', models.CharField(help_text='Code unique identifiant cet élément', max_length=50, unique=True, verbose_name='Code')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('article_type', models.CharField(choices=[('product', 'Produit'), ('service', 'Service'), ('bundle', 'Pack/Bundle'), ('variant', 'Variante')], default='product', max_length=20, verbose_name="Type d'article")),
                ('barcode', models.CharField(blank=True, help_text='Code-barres EAN13, UPC ou autre', max_length=50, null=True, unique=True, verbose_name='Code-barres principal')),
                ('internal_reference', models.CharField(blank=True, help_text='Référence interne du magasin', max_length=50, null=True, unique=True, verbose_name='Référence interne')),
                ('supplier_reference', models.CharField(blank=True, help_text='Référence chez le fournisseur principal', max_length=50, verbose_name='Référence fournisseur')),
                ('short_description', models.CharField(blank=True, help_text='Description affichée en caisse', max_length=100, verbose_name='Description courte')),
                ('purchase_price', models.DecimalField(decimal_places=2, default=0.0, help_text="Prix d'achat hors taxes", max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name="Prix d'achat HT")),
                ('selling_price', models.DecimalField(decimal_places=2, default=0.0, help_text='Prix de vente toutes taxes comprises', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prix de vente TTC')),
                ('manage_stock', models.BooleanField(default=True, help_text='Activer la gestion de stock pour cet article', verbose_name='Gérer le stock')),
                ('min_stock_level', models.IntegerField(default=0, help_text="Seuil d'alerte stock bas", validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock minimum')),
                ('max_stock_level', models.IntegerField(default=0, help_text='Stock maximum recommandé', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock maximum')),
                ('requires_lot_tracking', models.BooleanField(default=False, help_text='Suivi obligatoire des numéros de lot', verbose_name='Traçabilité des lots')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Gestion des dates de péremption', verbose_name='Date de péremption')),
                ('is_sellable', models.BooleanField(default=True, help_text='Article disponible à la vente', verbose_name='Vendable')),
                ('is_purchasable', models.BooleanField(default=True, help_text='Article peut être acheté auprès des fournisseurs', verbose_name='Achetable')),
                ('allow_negative_stock', models.BooleanField(default=False, help_text='Permet les ventes même sans stock', verbose_name='Autoriser stock négatif')),
                ('variant_attributes', models.JSONField(blank=True, default=dict, help_text='Attributs spécifiques de la variante (taille, couleur, etc.)', verbose_name='Attributs variante')),
                ('image', models.ImageField(blank=True, null=True, upload_to='articles/', verbose_name='Image principale')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Poids (kg)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Longueur (cm)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Largeur (cm)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Hauteur (cm)')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Mots-clés pour la recherche', verbose_name='Tags')),
                ('notes', models.TextField(blank=True, help_text='Notes internes non visibles en caisse', verbose_name='Notes internes')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('parent_article', models.ForeignKey(blank=True, help_text='Article parent pour les variantes (taille, couleur, etc.)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='inventory.article', verbose_name='Article parent')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.brand', verbose_name='Marque')),
            ],
            options={
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
                'db_table': 'inventory_article',
                'ordering': ['category__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ArticleBarcode',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('barcode', models.CharField(max_length=50, unique=True, verbose_name='Code-barres')),
                ('barcode_type', models.CharField(choices=[('EAN13', 'EAN-13'), ('UPC', 'UPC'), ('CODE128', 'Code 128'), ('INTERNAL', 'Code interne'), ('SUPPLIER', 'Code fournisseur')], default='EAN13', max_length=20, verbose_name='Type de code-barres')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Code principal')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_barcodes', to='inventory.article', verbose_name='Article')),
            ],
            options={
                'verbose_name': 'Code-barres article',
                'verbose_name_plural': 'Codes-barres articles',
                'db_table': 'inventory_article_barcode',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('order', models.IntegerField(default=0, help_text="Ordre d'affichage", verbose_name='Ordre')),
                ('code', models.CharField(help_text='Code unique de la catégorie', max_length=20, unique=True, verbose_name='Code catégorie')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Taux de TVA par défaut pour cette catégorie', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux de TVA (%)')),
                ('requires_prescription', models.BooleanField(default=False, help_text='Articles de cette catégorie nécessitent une ordonnance', verbose_name='Nécessite ordonnance')),
                ('requires_lot_tracking', models.BooleanField(default=False, help_text='Suivi obligatoire des lots pour cette catégorie', verbose_name='Traçabilité lot obligatoire')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Date de péremption obligatoire pour cette catégorie', verbose_name='Date de péremption obligatoire')),
                ('default_min_stock', models.IntegerField(default=5, help_text='Stock minimum par défaut pour les articles de cette catégorie', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock minimum par défaut')),
                ('color', models.CharField(default='#007bff', help_text="Couleur d'affichage (format hexadécimal)", max_length=7, verbose_name='Couleur')),
                ('parent', models.ForeignKey(blank=True, help_text='Catégorie parent pour créer une hiérarchie', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.category', verbose_name='Catégorie parent')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'db_table': 'inventory_category',
                'ordering': ['parent__name', 'order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.category', verbose_name='Catégorie'),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('code', models.CharField(help_text='Code unique identifiant cet élément', max_length=50, unique=True, verbose_name='Code')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('location_type', models.CharField(choices=[('store', 'Magasin'), ('zone', 'Zone'), ('aisle', 'Rayon'), ('shelf', 'Étagère'), ('bin', 'Casier')], max_length=20, verbose_name="Type d'emplacement")),
                ('barcode', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Code-barres emplacement')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.location', verbose_name='Emplacement parent')),
            ],
            options={
                'verbose_name': 'Emplacement',
                'verbose_name_plural': 'Emplacements',
                'db_table': 'inventory_location',
                'ordering': ['location_type', 'code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('lot_number', models.CharField(blank=True, help_text='Numéro de lot du fournisseur', max_length=50, verbose_name='Numéro de lot')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Date de péremption')),
                ('quantity_on_hand', models.DecimalField(decimal_places=3, default=0, max_digits=10, verbose_name='Quantité en stock')),
                ('quantity_reserved', models.DecimalField(decimal_places=3, default=0, max_digits=10, verbose_name='Quantité réservée')),
                ('quantity_available', models.DecimalField(decimal_places=3, default=0, max_digits=10, verbose_name='Quantité disponible')),
                ('unit_cost', models.DecimalField(decimal_places=2, default=0.0, help_text="Coût unitaire d'achat de ce lot", max_digits=10, verbose_name='Coût unitaire')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_entries', to='inventory.article', verbose_name='Article')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.location', verbose_name='Emplacement')),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
                'db_table': 'inventory_stock',
                'ordering': ['article__name', 'location__name', 'expiry_date'],
                'unique_together': {('article', 'location', 'lot_number', 'expiry_date')},
            },
        ),
        migrations.CreateModel(
            name='StockAlert',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('alert_type', models.CharField(choices=[('low_stock', 'Stock bas'), ('out_of_stock', 'Rupture de stock'), ('expiry_soon', 'Péremption proche'), ('expired', 'Périmé'), ('overstock', 'Surstock')], max_length=20, verbose_name="Type d'alerte")),
                ('alert_level', models.CharField(choices=[('info', 'Information'), ('warning', 'Avertissement'), ('critical', 'Critique')], max_length=20, verbose_name="Niveau d'alerte")),
                ('message', models.TextField(verbose_name="Message d'alerte")),
                ('is_acknowledged', models.BooleanField(default=False, verbose_name='Acquittée')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Acquittée le')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Acquittée par')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='inventory.article', verbose_name='Article')),
                ('stock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.stock', verbose_name='Stock concerné')),
            ],
            options={
                'verbose_name': 'Alerte de stock',
                'verbose_name_plural': 'Alertes de stock',
                'db_table': 'inventory_stock_alert',
                'ordering': ['-created_at', 'alert_level'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('movement_type', models.CharField(choices=[('in', 'Entrée'), ('out', 'Sortie'), ('adjustment', 'Ajustement'), ('transfer', 'Transfert'), ('return', 'Retour'), ('loss', 'Perte'), ('found', 'Trouvé')], max_length=20, verbose_name='Type de mouvement')),
                ('reason', models.CharField(choices=[('purchase', 'Achat fournisseur'), ('sale', 'Vente client'), ('return_supplier', 'Retour fournisseur'), ('return_customer', 'Retour client'), ('inventory', 'Inventaire'), ('damage', 'Dommage'), ('theft', 'Vol'), ('expiry', 'Péremption'), ('transfer', 'Transfert'), ('adjustment', 'Ajustement'), ('production', 'Production'), ('consumption', 'Consommation')], max_length=20, verbose_name='Raison du mouvement')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Quantité')),
                ('unit_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Coût unitaire')),
                ('reference_document', models.CharField(blank=True, help_text='Numéro de facture, bon de livraison, etc.', max_length=100, verbose_name='Document de référence')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('stock_before', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Stock avant')),
                ('stock_after', models.DecimalField(decimal_places=3, max_digits=10, verbose_name='Stock après')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='inventory.article', verbose_name='Article')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='inventory.stock', verbose_name='Stock concerné')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Mouvement de stock',
                'verbose_name_plural': 'Mouvements de stock',
                'db_table': 'inventory_stock_movement',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='article',
            name='main_supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.supplier', verbose_name='Fournisseur principal'),
        ),
        migrations.AddField(
            model_name='article',
            name='unit_of_measure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.unitofmeasure', verbose_name='Unité de mesure'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['barcode'], name='inventory_a_barcode_16e71a_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['internal_reference'], name='inventory_a_interna_fc4cb9_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['category', 'is_active'], name='inventory_a_categor_83950f_idx'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['is_sellable', 'is_active'], name='inventory_a_is_sell_f00b19_idx'),
        ),
    ]
