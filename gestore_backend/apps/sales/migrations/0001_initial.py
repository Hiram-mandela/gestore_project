# Generated by Django 5.2.6 on 2025-09-27 07:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('customer_type', models.CharField(choices=[('individual', 'Particulier'), ('company', 'Entreprise'), ('professional', 'Professionnel')], default='individual', max_length=20, verbose_name='Type de client')),
                ('customer_code', models.CharField(help_text='Code unique généré automatiquement', max_length=20, unique=True, verbose_name='Code client')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='Prénom')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='Nom de famille')),
                ('company_name', models.CharField(blank=True, max_length=100, verbose_name="Nom de l'entreprise")),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('postal_code', models.CharField(blank=True, max_length=10, verbose_name='Code postal')),
                ('country', models.CharField(default="Côte d'Ivoire", max_length=50, verbose_name='Pays')),
                ('tax_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro fiscal/TVA')),
                ('loyalty_card_number', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Numéro carte fidélité')),
                ('loyalty_points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Points fidélité')),
                ('total_purchases', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='Total des achats')),
                ('purchase_count', models.IntegerField(default=0, verbose_name="Nombre d'achats")),
                ('last_purchase_date', models.DateTimeField(blank=True, null=True, verbose_name='Dernier achat')),
                ('preferred_payment_method', models.CharField(blank=True, max_length=20, verbose_name='Mode de paiement préféré')),
                ('marketing_consent', models.BooleanField(default=False, help_text='Accepte de recevoir des communications marketing', verbose_name='Consent marketing')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'db_table': 'sales_customer',
                'ordering': ['last_name', 'first_name', 'company_name'],
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('payment_type', models.CharField(choices=[('cash', 'Espèces'), ('card', 'Carte bancaire'), ('mobile_money', 'Mobile Money'), ('check', 'Chèque'), ('credit', 'Crédit'), ('voucher', "Bon d'achat"), ('loyalty_points', 'Points fidélité')], max_length=20, verbose_name='Type de paiement')),
                ('requires_authorization', models.BooleanField(default=False, help_text='Nécessite une autorisation de supervision', verbose_name='Nécessite autorisation')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Montant maximum autorisé pour ce mode de paiement', max_digits=10, null=True, verbose_name='Montant maximum')),
                ('fee_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Pourcentage de frais pour ce mode de paiement', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Frais (%)')),
                ('integration_config', models.JSONField(blank=True, default=dict, help_text="Configuration technique pour l'intégration", verbose_name='Configuration intégration')),
            ],
            options={
                'verbose_name': 'Moyen de paiement',
                'verbose_name_plural': 'Moyens de paiement',
                'db_table': 'sales_payment_method',
                'ordering': ['payment_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('discount_type', models.CharField(choices=[('percentage', 'Pourcentage'), ('fixed_amount', 'Montant fixe'), ('buy_x_get_y', 'Achetez X obtenez Y'), ('loyalty_points', 'Points fidélité')], max_length=20, verbose_name='Type de remise')),
                ('scope', models.CharField(choices=[('sale', 'Sur la vente totale'), ('category', 'Sur une catégorie'), ('article', 'Sur un article spécifique'), ('customer', 'Pour un client spécifique')], max_length=20, verbose_name='Portée de la remise')),
                ('percentage_value', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Valeur pourcentage')),
                ('fixed_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Valeur fixe')),
                ('min_quantity', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantité minimum')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Montant minimum')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Montant maximum')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de début')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('max_uses', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Utilisations maximum')),
                ('max_uses_per_customer', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Utilisations max par client')),
                ('current_uses', models.IntegerField(default=0, verbose_name='Utilisations actuelles')),
                ('requires_authorization', models.BooleanField(default=False, verbose_name='Nécessite autorisation')),
                ('target_articles', models.ManyToManyField(blank=True, to='inventory.article', verbose_name='Articles cibles')),
                ('target_categories', models.ManyToManyField(blank=True, to='inventory.category', verbose_name='Catégories cibles')),
                ('target_customers', models.ManyToManyField(blank=True, to='sales.customer', verbose_name='Clients cibles')),
            ],
            options={
                'verbose_name': 'Remise',
                'verbose_name_plural': 'Remises',
                'db_table': 'sales_discount',
                'ordering': ['-start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('sale_number', models.CharField(help_text='Numéro unique généré automatiquement', max_length=30, unique=True, verbose_name='Numéro de vente')),
                ('sale_type', models.CharField(choices=[('regular', 'Vente normale'), ('return', 'Retour'), ('exchange', 'Échange'), ('quote', 'Devis')], default='regular', max_length=20, verbose_name='Type de vente')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('pending', 'En attente'), ('completed', 'Terminée'), ('cancelled', 'Annulée'), ('refunded', 'Remboursée'), ('partially_refunded', 'Partiellement remboursée')], default='draft', max_length=20, verbose_name='Statut')),
                ('sale_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de vente')),
                ('subtotal', models.DecimalField(decimal_places=2, default=0.0, help_text='Montant hors taxes avant remises', max_digits=10, verbose_name='Sous-total HT')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Montant total des remises appliquées', max_digits=10, verbose_name='Montant remise')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TVA')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant total TTC')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant payé')),
                ('change_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Monnaie rendue')),
                ('loyalty_points_earned', models.IntegerField(default=0, verbose_name='Points fidélité gagnés')),
                ('loyalty_points_used', models.IntegerField(default=0, verbose_name='Points fidélité utilisés')),
                ('notes', models.TextField(blank=True, help_text='Notes internes sur la vente', verbose_name='Notes')),
                ('customer_notes', models.TextField(blank=True, help_text='Notes visibles sur le ticket', verbose_name='Notes client')),
                ('receipt_printed', models.BooleanField(default=False, verbose_name='Ticket imprimé')),
                ('receipt_emailed', models.BooleanField(default=False, verbose_name='Ticket envoyé par email')),
                ('cashier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_as_cashier', to=settings.AUTH_USER_MODEL, verbose_name='Caissier')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sales', to='sales.customer', verbose_name='Client')),
                ('original_sale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='related_sales', to='sales.sale', verbose_name="Vente d'origine")),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Vente',
                'verbose_name_plural': 'Ventes',
                'db_table': 'sales_sale',
                'ordering': ['-sale_date'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('receipt_number', models.CharField(max_length=30, unique=True, verbose_name='Numéro de ticket')),
                ('header_text', models.TextField(blank=True, verbose_name="Texte d'en-tête")),
                ('footer_text', models.TextField(blank=True, verbose_name='Texte de pied de page')),
                ('printed_at', models.DateTimeField(blank=True, null=True, verbose_name='Imprimé le')),
                ('print_count', models.IntegerField(default=0, verbose_name="Nombre d'impressions")),
                ('emailed_at', models.DateTimeField(blank=True, null=True, verbose_name='Envoyé par email le')),
                ('sale', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='receipt', to='sales.sale', verbose_name='Vente')),
            ],
            options={
                'verbose_name': 'Ticket de caisse',
                'verbose_name_plural': 'Tickets de caisse',
                'db_table': 'sales_receipt',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Montant')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('cancelled', 'Annulé'), ('refunded', 'Remboursé')], default='pending', max_length=20, verbose_name='Statut')),
                ('card_last_digits', models.CharField(blank=True, max_length=4, verbose_name='4 derniers chiffres carte')),
                ('authorization_code', models.CharField(blank=True, max_length=50, verbose_name="Code d'autorisation")),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='ID transaction externe')),
                ('mobile_money_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro Mobile Money')),
                ('check_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro de chèque')),
                ('cash_received', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Espèces reçues')),
                ('cash_change', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Monnaie rendue')),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de paiement')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('payment_method', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sales.paymentmethod', verbose_name='Moyen de paiement')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='sales.sale', verbose_name='Vente')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'db_table': 'sales_payment',
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='SaleDiscount',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant de la remise')),
                ('authorized_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Autorisée par')),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sales.discount', verbose_name='Remise')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applied_discounts', to='sales.sale', verbose_name='Vente')),
            ],
            options={
                'verbose_name': 'Remise appliquée',
                'verbose_name_plural': 'Remises appliquées',
                'db_table': 'sales_sale_discount',
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('article_name', models.CharField(help_text="Nom de l'article au moment de la vente", max_length=200, verbose_name='Nom article')),
                ('article_code', models.CharField(help_text="Code de l'article au moment de la vente", max_length=50, verbose_name='Code article')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=10, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='Quantité')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Prix unitaire au moment de la vente', max_digits=10, verbose_name='Prix unitaire')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Remise (%)')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant remise')),
                ('line_total', models.DecimalField(decimal_places=2, default=0.0, help_text='Total de la ligne après remise', max_digits=10, verbose_name='Total ligne')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Taux de TVA (%)')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant TVA')),
                ('lot_number', models.CharField(blank=True, max_length=50, verbose_name='Numéro de lot vendu')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.article', verbose_name='Article')),
                ('sale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='sales.sale', verbose_name='Vente')),
                ('stock_movement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.stockmovement', verbose_name='Mouvement de stock associé')),
            ],
            options={
                'verbose_name': 'Ligne de vente',
                'verbose_name_plural': 'Lignes de vente',
                'db_table': 'sales_sale_item',
                'ordering': ['sale', 'created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['sale_number'], name='sales_sale_sale_nu_99d8fe_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['sale_date'], name='sales_sale_sale_da_2fd927_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['customer', 'sale_date'], name='sales_sale_custome_e35bee_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['cashier', 'sale_date'], name='sales_sale_cashier_a6082b_idx'),
        ),
    ]
