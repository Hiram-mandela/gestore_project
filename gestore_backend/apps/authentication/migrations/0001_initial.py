# Generated by Django 5.2.6 on 2025-09-27 07:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si cet élément est actif', verbose_name='Actif')),
                ('role_type', models.CharField(choices=[('admin', 'Administrateur Système'), ('manager', 'Directeur/Gérant'), ('stock_manager', 'Responsable Stock'), ('cashier', 'Caissier'), ('pharmacist', 'Pharmacien'), ('seller', 'Vendeur'), ('viewer', 'Consultation uniquement')], help_text='Type prédéfini de rôle', max_length=20, unique=True, verbose_name='Type de rôle')),
                ('can_manage_users', models.BooleanField(default=False, help_text='Peut créer/modifier/supprimer des utilisateurs', verbose_name='Gestion utilisateurs')),
                ('can_manage_inventory', models.BooleanField(default=False, help_text='Peut gérer les articles et stocks', verbose_name='Gestion stocks')),
                ('can_manage_sales', models.BooleanField(default=False, help_text='Peut effectuer des ventes', verbose_name='Gestion ventes')),
                ('can_manage_suppliers', models.BooleanField(default=False, help_text='Peut gérer les fournisseurs et commandes', verbose_name='Gestion fournisseurs')),
                ('can_view_reports', models.BooleanField(default=False, help_text='Peut consulter les rapports', verbose_name='Consultation rapports')),
                ('can_manage_reports', models.BooleanField(default=False, help_text='Peut créer et modifier les rapports', verbose_name='Gestion rapports')),
                ('can_manage_settings', models.BooleanField(default=False, help_text='Peut modifier les paramètres système', verbose_name='Gestion paramètres')),
                ('can_apply_discounts', models.BooleanField(default=False, help_text='Peut appliquer des remises', verbose_name='Application remises')),
                ('max_discount_percent', models.DecimalField(decimal_places=2, default=0, help_text='Pourcentage maximum de remise autorisé', max_digits=5, verbose_name='Remise maximum (%)')),
                ('can_void_transactions', models.BooleanField(default=False, help_text='Peut annuler des transactions', verbose_name='Annulation transactions')),
                ('permissions', models.ManyToManyField(blank=True, help_text='Permissions spécifiques à ce rôle', to='auth.permission', verbose_name='Permissions')),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'db_table': 'auth_role',
                'ordering': ['role_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_code', models.CharField(blank=True, help_text="Code unique de l'employé", max_length=20, null=True, unique=True, verbose_name='Code employé')),
                ('phone_number', models.CharField(blank=True, help_text='Numéro de téléphone', max_length=17, validators=[django.core.validators.RegexValidator(message="Le numéro doit être au format: '+999999999'. Jusqu'à 15 chiffres.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Téléphone')),
                ('hire_date', models.DateField(blank=True, help_text="Date d'embauche de l'employé", null=True, verbose_name="Date d'embauche")),
                ('department', models.CharField(blank=True, help_text='Département ou service', max_length=100, verbose_name='Département')),
                ('is_locked', models.BooleanField(default=False, help_text='Compte temporairement verrouillé', verbose_name='Compte verrouillé')),
                ('locked_until', models.DateTimeField(blank=True, help_text='Date de fin de verrouillage', null=True, verbose_name="Verrouillé jusqu'à")),
                ('failed_login_attempts', models.IntegerField(default=0, help_text='Nombre de tentatives de connexion échouées', verbose_name='Tentatives échouées')),
                ('last_password_change', models.DateTimeField(auto_now_add=True, verbose_name='Dernier changement mot de passe')),
                ('password_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Mot de passe expire le')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, help_text="Rôle principal de l'utilisateur", null=True, on_delete=django.db.models.deletion.PROTECT, to='authentication.role', verbose_name='Rôle principal')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAuditLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('action', models.CharField(choices=[('login', 'Connexion'), ('logout', 'Déconnexion'), ('create', 'Création'), ('read', 'Consultation'), ('update', 'Modification'), ('delete', 'Suppression'), ('export', 'Export de données'), ('import', 'Import de données'), ('print', 'Impression'), ('backup', 'Sauvegarde'), ('restore', 'Restauration')], max_length=20, verbose_name='Action')),
                ('model_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Modèle concerné')),
                ('object_id', models.UUIDField(blank=True, null=True, verbose_name="ID de l'objet")),
                ('object_repr', models.CharField(blank=True, max_length=200, verbose_name="Représentation de l'objet")),
                ('changes', models.JSONField(blank=True, null=True, verbose_name='Détail des modifications')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='Agent utilisateur')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Horodatage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Journal d'audit",
                'verbose_name_plural': "Journaux d'audit",
                'db_table': 'auth_audit_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Photo de profil')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('emergency_contact', models.CharField(blank=True, max_length=100, verbose_name="Contact d'urgence")),
                ('emergency_phone', models.CharField(blank=True, max_length=17, verbose_name="Téléphone d'urgence")),
                ('language', models.CharField(choices=[('fr', 'Français'), ('en', 'English')], default='fr', max_length=10, verbose_name='Langue préférée')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Fuseau horaire')),
                ('theme', models.CharField(choices=[('light', 'Clair'), ('dark', 'Sombre'), ('auto', 'Automatique')], default='light', max_length=20, verbose_name="Thème d'interface")),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notifications email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notifications SMS')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Dernière IP de connexion')),
                ('login_count', models.IntegerField(default=0, verbose_name='Nombre de connexions')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Profil utilisateur',
                'verbose_name_plural': 'Profils utilisateur',
                'db_table': 'auth_user_profile',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Clé de session')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Adresse IP')),
                ('user_agent', models.TextField(verbose_name='Agent utilisateur')),
                ('login_at', models.DateTimeField(auto_now_add=True, verbose_name='Connexion à')),
                ('logout_at', models.DateTimeField(blank=True, null=True, verbose_name='Déconnexion à')),
                ('is_active', models.BooleanField(default=True, verbose_name='Session active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Session utilisateur',
                'verbose_name_plural': 'Sessions utilisateur',
                'db_table': 'auth_user_session',
                'ordering': ['-login_at'],
            },
        ),
    ]
