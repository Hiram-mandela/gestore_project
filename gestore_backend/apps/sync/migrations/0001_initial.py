# Generated by Django 5.2.6 on 2025-09-27 07:51

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SyncConfiguration',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('enabled_models', models.JSONField(default=list, help_text='Liste des modèles Django à synchroniser', verbose_name='Modèles activés')),
                ('excluded_fields', models.JSONField(blank=True, default=dict, help_text='Champs à exclure par modèle', verbose_name='Champs exclus')),
                ('conflict_strategies', models.JSONField(blank=True, default=dict, help_text='Stratégie de résolution par modèle', verbose_name='Stratégies de conflit')),
                ('sync_filters', models.JSONField(blank=True, default=dict, help_text='Filtres à appliquer par modèle', verbose_name='Filtres de synchronisation')),
                ('sync_interval_minutes', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Intervalle de sync (minutes)')),
                ('max_records_per_batch', models.IntegerField(default=1000, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Enregistrements max par lot')),
                ('connection_timeout_seconds', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Timeout connexion (secondes)')),
                ('retry_delay_minutes', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Délai entre tentatives (minutes)')),
                ('encryption_enabled', models.BooleanField(default=True, verbose_name='Chiffrement activé')),
                ('compression_enabled', models.BooleanField(default=True, verbose_name='Compression activée')),
                ('auto_cleanup_days', models.IntegerField(default=30, help_text='Supprimer les logs de sync après X jours', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nettoyage auto (jours)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Configuration active')),
            ],
            options={
                'verbose_name': 'Configuration de synchronisation',
                'verbose_name_plural': 'Configurations de synchronisation',
                'db_table': 'sync_configuration',
            },
        ),
        migrations.CreateModel(
            name='SyncNode',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('name', models.CharField(help_text='Nom ou désignation', max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, help_text='Description détaillée (optionnelle)', verbose_name='Description')),
                ('node_type', models.CharField(choices=[('server', 'Serveur principal'), ('client', 'Client desktop'), ('mobile', 'Application mobile'), ('backup', 'Serveur de sauvegarde')], max_length=20, verbose_name='Type de nœud')),
                ('node_id', models.CharField(help_text='Identifiant généré automatiquement', max_length=64, unique=True, verbose_name='Identifiant unique du nœud')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('port', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MinValueValidator(65535)], verbose_name='Port')),
                ('api_endpoint', models.URLField(blank=True, help_text="URL complète de l'API de ce nœud", verbose_name='Endpoint API')),
                ('api_key', models.CharField(help_text="Clé d'authentification pour la synchronisation", max_length=128, unique=True, verbose_name='Clé API')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('inactive', 'Inactif'), ('maintenance', 'Maintenance'), ('error', 'Erreur')], default='active', max_length=20, verbose_name='Statut')),
                ('version', models.CharField(blank=True, max_length=20, verbose_name='Version GESTORE')),
                ('os_info', models.CharField(blank=True, max_length=100, verbose_name='Informations OS')),
                ('hardware_fingerprint', models.CharField(blank=True, max_length=64, verbose_name='Empreinte matérielle')),
                ('last_sync_at', models.DateTimeField(blank=True, null=True, verbose_name='Dernière synchronisation')),
                ('last_seen_at', models.DateTimeField(blank=True, null=True, verbose_name='Dernière activité')),
                ('sync_enabled', models.BooleanField(default=True, verbose_name='Synchronisation activée')),
                ('sync_priority', models.IntegerField(default=50, help_text='1 = priorité maximale, 100 = priorité minimale', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MinValueValidator(100)], verbose_name='Priorité de synchronisation')),
                ('total_syncs', models.IntegerField(default=0, verbose_name='Nombre total de synchronisations')),
                ('successful_syncs', models.IntegerField(default=0, verbose_name='Synchronisations réussies')),
                ('failed_syncs', models.IntegerField(default=0, verbose_name='Synchronisations échouées')),
            ],
            options={
                'verbose_name': 'Nœud de synchronisation',
                'verbose_name_plural': 'Nœuds de synchronisation',
                'db_table': 'sync_node',
                'ordering': ['node_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SyncOperation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('object_id', models.UUIDField(verbose_name="ID de l'objet")),
                ('operation_type', models.CharField(choices=[('create', 'Création'), ('update', 'Mise à jour'), ('delete', 'Suppression'), ('conflict', 'Conflit')], max_length=20, verbose_name="Type d'opération")),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminée'), ('failed', 'Échouée'), ('skipped', 'Ignorée')], default='pending', max_length=20, verbose_name='Statut')),
                ('local_data', models.JSONField(blank=True, help_text="État local de l'enregistrement", null=True, verbose_name='Données locales')),
                ('remote_data', models.JSONField(blank=True, help_text="État distant de l'enregistrement", null=True, verbose_name='Données distantes')),
                ('merged_data', models.JSONField(blank=True, help_text='Résultat après résolution de conflit', null=True, verbose_name='Données fusionnées')),
                ('local_hash', models.CharField(blank=True, max_length=64, verbose_name='Hash local')),
                ('remote_hash', models.CharField(blank=True, max_length=64, verbose_name='Hash distant')),
                ('local_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Timestamp local')),
                ('remote_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Timestamp distant')),
                ('is_conflict', models.BooleanField(default=False, verbose_name='Conflit détecté')),
                ('conflict_resolution_strategy', models.CharField(blank=True, help_text='Méthode utilisée pour résoudre le conflit', max_length=50, verbose_name='Stratégie de résolution de conflit')),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('sequence', models.IntegerField(default=0, help_text='Ordre de traitement dans la session', verbose_name='Séquence')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Type de contenu')),
            ],
            options={
                'verbose_name': 'Opération de synchronisation',
                'verbose_name_plural': 'Opérations de synchronisation',
                'db_table': 'sync_operation',
                'ordering': ['session', 'sequence'],
            },
        ),
        migrations.CreateModel(
            name='ConflictResolution',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('detected_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Détecté le')),
                ('conflict_type', models.CharField(help_text='Description du type de conflit détecté', max_length=50, verbose_name='Type de conflit')),
                ('resolution_strategy', models.CharField(choices=[('local_wins', 'Version locale gagne'), ('remote_wins', 'Version distante gagne'), ('latest_wins', 'Version la plus récente gagne'), ('manual', 'Résolution manuelle'), ('merge', 'Fusion automatique'), ('user_choice', 'Choix utilisateur')], max_length=20, verbose_name='Stratégie de résolution')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('resolved', 'Résolu'), ('failed', 'Échec')], default='pending', max_length=20, verbose_name='Statut')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Résolu le')),
                ('field_conflicts', models.JSONField(default=dict, help_text='Détail des conflits par champ', verbose_name='Conflits par champ')),
                ('final_data', models.JSONField(blank=True, help_text='Données après résolution du conflit', null=True, verbose_name='Données finales')),
                ('resolution_notes', models.TextField(blank=True, verbose_name='Notes de résolution')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Résolu par')),
                ('sync_operation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='resolution', to='sync.syncoperation', verbose_name='Opération de sync')),
            ],
            options={
                'verbose_name': 'Résolution de conflit',
                'verbose_name_plural': 'Résolutions de conflit',
                'db_table': 'sync_conflict_resolution',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='SyncSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('direction', models.CharField(choices=[('pull', 'Réception'), ('push', 'Envoi'), ('bidirectional', 'Bidirectionnelle')], max_length=20, verbose_name='Direction')),
                ('status', models.CharField(choices=[('started', 'Démarrée'), ('running', 'En cours'), ('completed', 'Terminée'), ('failed', 'Échouée'), ('cancelled', 'Annulée')], default='started', max_length=20, verbose_name='Statut')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Démarrée à')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée à')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Durée')),
                ('records_processed', models.IntegerField(default=0, verbose_name='Enregistrements traités')),
                ('records_created', models.IntegerField(default=0, verbose_name='Enregistrements créés')),
                ('records_updated', models.IntegerField(default=0, verbose_name='Enregistrements mis à jour')),
                ('records_deleted', models.IntegerField(default=0, verbose_name='Enregistrements supprimés')),
                ('conflicts_detected', models.IntegerField(default=0, verbose_name='Conflits détectés')),
                ('conflicts_resolved', models.IntegerField(default=0, verbose_name='Conflits résolus')),
                ('data_size_bytes', models.BigIntegerField(default=0, verbose_name='Taille des données (octets)')),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('error_details', models.JSONField(blank=True, default=dict, verbose_name='Détails des erreurs')),
                ('sync_metadata', models.JSONField(blank=True, default=dict, verbose_name='Métadonnées de synchronisation')),
                ('created_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a créé cet enregistrement', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Créé par')),
                ('source_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_sessions', to='sync.syncnode', verbose_name='Nœud source')),
                ('target_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_sessions', to='sync.syncnode', verbose_name='Nœud cible')),
                ('updated_by', models.ForeignKey(blank=True, help_text='Utilisateur qui a modifié cet enregistrement en dernier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
            ],
            options={
                'verbose_name': 'Session de synchronisation',
                'verbose_name_plural': 'Sessions de synchronisation',
                'db_table': 'sync_session',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='syncoperation',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='sync.syncsession', verbose_name='Session'),
        ),
        migrations.CreateModel(
            name='SyncQueue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('object_id', models.UUIDField(verbose_name="ID de l'objet")),
                ('operation', models.CharField(choices=[('create', 'Création'), ('update', 'Mise à jour'), ('delete', 'Suppression'), ('conflict', 'Conflit')], max_length=20, verbose_name='Opération')),
                ('priority', models.CharField(choices=[('high', 'Haute'), ('normal', 'Normale'), ('low', 'Basse')], default='normal', max_length=10, verbose_name='Priorité')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué'), ('retry', 'Nouvelle tentative')], default='pending', max_length=20, verbose_name='Statut')),
                ('data_snapshot', models.JSONField(blank=True, help_text='État des données au moment de la mise en queue', null=True, verbose_name='Snapshot des données')),
                ('retry_count', models.IntegerField(default=0, verbose_name='Nombre de tentatives')),
                ('max_retries', models.IntegerField(default=3, verbose_name='Tentatives maximum')),
                ('next_retry_at', models.DateTimeField(blank=True, null=True, verbose_name='Prochaine tentative')),
                ('queued_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Mis en queue le')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('last_error', models.TextField(blank=True, verbose_name='Dernière erreur')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Type de contenu')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_queue', to='sync.syncnode', verbose_name='Nœud')),
            ],
            options={
                'verbose_name': 'File de synchronisation',
                'verbose_name_plural': 'File de synchronisation',
                'db_table': 'sync_queue',
                'ordering': ['-priority', 'queued_at'],
                'indexes': [models.Index(fields=['status', 'priority'], name='sync_queue_status_8167c7_idx'), models.Index(fields=['node', 'status'], name='sync_queue_node_id_51c18a_idx'), models.Index(fields=['next_retry_at'], name='sync_queue_next_re_1611b7_idx')],
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date et heure de création automatique', verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de dernière modification automatique', verbose_name='Date de modification')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant UUID unique généré automatiquement', primary_key=True, serialize=False, verbose_name='Identifiant unique')),
                ('is_deleted', models.BooleanField(default=False, help_text="Marque l'enregistrement comme supprimé sans le supprimer physiquement", verbose_name='Supprimé')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date et heure de suppression logique', null=True, verbose_name='Date de suppression')),
                ('sync_status', models.CharField(choices=[('synced', 'Synchronisé'), ('pending', 'En attente de synchronisation'), ('conflict', 'Conflit de synchronisation'), ('error', 'Erreur de synchronisation')], default='pending', help_text='État de synchronisation avec la base distante', max_length=20, verbose_name='Statut de synchronisation')),
                ('last_sync_at', models.DateTimeField(blank=True, help_text='Date et heure de dernière synchronisation réussie', null=True, verbose_name='Dernière synchronisation')),
                ('sync_hash', models.CharField(blank=True, help_text='Hash MD5 des données pour détecter les modifications', max_length=64, verbose_name='Hash de synchronisation')),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Information'), ('warning', 'Avertissement'), ('error', 'Erreur'), ('critical', 'Critique')], max_length=10, verbose_name='Niveau')),
                ('message', models.TextField(verbose_name='Message')),
                ('context', models.JSONField(blank=True, default=dict, help_text='Informations contextuelles additionnelles', verbose_name='Contexte')),
                ('execution_time_ms', models.IntegerField(blank=True, null=True, verbose_name="Temps d'exécution (ms)")),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='sync.syncnode', verbose_name='Nœud')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='sync.syncsession', verbose_name='Session')),
            ],
            options={
                'verbose_name': 'Log de synchronisation',
                'verbose_name_plural': 'Logs de synchronisation',
                'db_table': 'sync_log',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['level', 'created_at'], name='sync_log_level_f9af96_idx'), models.Index(fields=['session', 'created_at'], name='sync_log_session_8a25f6_idx'), models.Index(fields=['node', 'created_at'], name='sync_log_node_id_ab434d_idx')],
            },
        ),
    ]
