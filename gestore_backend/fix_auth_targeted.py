#!/usr/bin/env python3
"""
Script de correction cibl√© pour les erreurs authentication restantes
Bas√© sur les logs d'erreur sp√©cifiques
"""

import os
import re

def apply_targeted_fixes():
    """
    Applique les corrections cibl√©es pour les erreurs sp√©cifiques
    """
    
    # ================================
    # 1. CORRIGER apps/authentication/views.py
    # ================================
    
    views_file = 'apps/authentication/views.py'
    print(f"üîß Correction de {views_file}...")
    
    with open(views_file, 'r', encoding='utf-8') as f:
        views_content = f.read()
    
    # Fix 1: RoleViewSet - users_count annotation
    views_content = re.sub(
        r"users_count=Count\('user',\s*filter=Q\(user__is_active=True\)\)",
        "users_count=Count('users', filter=Q(users__is_active=True))",
        views_content
    )
    
    # Fix 2: UserViewSet - Prefetch 'usersession' ‚Üí 'sessions'
    views_content = re.sub(
        r"Prefetch\(\s*['\"]usersession['\"],",
        "Prefetch(\n                'sessions',",
        views_content
    )
    
    # Fix 3: UserViewSet - Count annotation
    views_content = re.sub(
        r"_is_online=Count\(['\"]usersession['\"],\s*filter=Q\(\s*usersession__",
        "_is_online=Count('sessions', filter=Q(\n                sessions__",
        views_content
    )
    
    # Fix 4: optimize_detail_queryset - prefetch_related
    views_content = re.sub(
        r"\.prefetch_related\(\s*['\"]usersession['\"],",
        ".prefetch_related(\n            'sessions',",
        views_content
    )
    
    # Fix 5: Toutes les autres r√©f√©rences 'usersession' restantes
    views_content = re.sub(r"'usersession'", "'sessions'", views_content)
    views_content = re.sub(r'"usersession"', "'sessions'", views_content)
    
    with open(views_file, 'w', encoding='utf-8') as f:
        f.write(views_content)
    
    print(f"‚úÖ {views_file} corrig√©")
    
    # ================================
    # 2. CORRIGER apps/authentication/serializers.py
    # ================================
    
    serializers_file = 'apps/authentication/serializers.py'
    print(f"üîß Correction de {serializers_file}...")
    
    with open(serializers_file, 'r', encoding='utf-8') as f:
        serializers_content = f.read()
    
    # Fix 1: UserSerializer.get_is_online - obj.usersession ‚Üí obj.sessions
    serializers_content = re.sub(
        r"return obj\.usersession\.filter\(",
        "return obj.sessions.filter(",
        serializers_content
    )
    
    # Fix 2: UserListSerializer.get_is_online - CombinedExpression fix
    # Remplacer la m√©thode compl√®te pour √©viter l'erreur CombinedExpression
    old_get_is_online = r"""def get_is_online\(self, obj\):
        # Version optimis√©e avec pr√©fetch
        if hasattr\(obj, '_is_online'\):
            return obj\._is_online
        return False"""
    
    new_get_is_online = """def get_is_online(self, obj):
        # Version optimis√©e avec pr√©fetch
        if hasattr(obj, '_is_online'):
            return obj._is_online > 0  # Count retourne un nombre
        return False"""
    
    serializers_content = re.sub(old_get_is_online, new_get_is_online, serializers_content, flags=re.DOTALL)
    
    # Fix 3: RoleSerializer.get_users_count - obj.user_set ‚Üí obj.users
    serializers_content = re.sub(
        r"return obj\.user_set\.filter\(is_active=True\)\.count\(\)",
        "return obj.users.filter(is_active=True).count()",
        serializers_content
    )
    
    with open(serializers_file, 'w', encoding='utf-8') as f:
        f.write(serializers_content)
    
    print(f"‚úÖ {serializers_file} corrig√©")

def verify_corrections():
    """
    V√©rifie que les corrections ont √©t√© appliqu√©es
    """
    print("\nüîç V√©rification des corrections...")
    
    # V√©rifier views.py
    with open('apps/authentication/views.py', 'r') as f:
        views_content = f.read()
    
    if 'usersession' in views_content:
        print("‚ö†Ô∏è Encore des r√©f√©rences 'usersession' dans views.py")
        return False
    
    if "Count('user'" in views_content:
        print("‚ö†Ô∏è Encore des r√©f√©rences Count('user') dans views.py")
        return False
    
    # V√©rifier serializers.py  
    with open('apps/authentication/serializers.py', 'r') as f:
        serializers_content = f.read()
    
    if 'obj.usersession' in serializers_content:
        print("‚ö†Ô∏è Encore des r√©f√©rences obj.usersession dans serializers.py")
        return False
    
    if 'obj.user_set' in serializers_content:
        print("‚ö†Ô∏è Encore des r√©f√©rences obj.user_set dans serializers.py")
        return False
    
    print("‚úÖ Toutes les corrections v√©rifi√©es avec succ√®s!")
    return True

def main():
    """
    Script principal de correction
    """
    print("üîß D√©marrage des corrections cibl√©es authentication...")
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not os.path.exists('apps/authentication'):
        print("‚ùå Erreur: Ex√©cuter depuis gestore_backend/")
        return
    
    try:
        apply_targeted_fixes()
        
        if verify_corrections():
            print("\n‚úÖ Toutes les corrections appliqu√©es avec succ√®s!")
            print("\nüß™ Relancez maintenant les tests:")
            print("   python manage.py test apps.authentication")
        else:
            print("\n‚ö†Ô∏è Des corrections n'ont pas √©t√© appliqu√©es correctement")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des corrections: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()