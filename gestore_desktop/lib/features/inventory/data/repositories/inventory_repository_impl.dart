// ========================================
// lib/features/inventory/data/repositories/inventory_repository_impl.dart
// Impl√©mentation du repository inventory
// VERSION CORRIG√âE - Signatures coh√©rentes
// ========================================

import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import '../../domain/entities/article_entity.dart';
import '../../domain/entities/article_detail_entity.dart';
import '../../domain/entities/category_entity.dart';
import '../../domain/entities/brand_entity.dart';
import '../../domain/entities/location_entity.dart';
import '../../domain/entities/stock_alert_entity.dart';
import '../../domain/entities/stock_entity.dart';
import '../../domain/entities/unit_of_measure_entity.dart';
import '../../domain/entities/paginated_response_entity.dart';
import '../../domain/repositories/inventory_repository.dart';
import '../../domain/usecases/article_bulk_operations_usecases.dart';
import '../datasources/inventory_remote_datasource.dart';

@LazySingleton(as: InventoryRepository)
class InventoryRepositoryImpl implements InventoryRepository {
  final InventoryRemoteDataSource remoteDataSource;
  final Logger logger;

  InventoryRepositoryImpl({
    required this.remoteDataSource,
    required this.logger,
  });

  // ==================== ARTICLES - LECTURE ====================

  @override
  Future<(PaginatedResponseEntity<ArticleEntity>?, String?)> getArticles({
    int page = 1,
    int pageSize = 20,
    String? search,
    String? categoryId,
    String? brandId,
    bool? isActive,
    bool? isLowStock,
    String? ordering,
  }) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration articles page $page');

      final responseModel = await remoteDataSource.getArticles(
        page: page,
        pageSize: pageSize,
        search: search,
        categoryId: categoryId,
        brandId: brandId,
        isActive: isActive,
        isLowStock: isLowStock,
        ordering: ordering,
      );

      final responseEntity = responseModel.toEntity(
            (articleModel) => articleModel.toEntity(),
      );

      logger.i('‚úÖ Repository: ${responseEntity.count} articles r√©cup√©r√©s');
      return (responseEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur r√©cup√©ration articles: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(ArticleEntity?, String?)> getArticleById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration article $id');
      final articleModel = await remoteDataSource.getArticleById(id);
      final articleEntity = articleModel.toEntity();
      logger.i('‚úÖ Repository: Article ${articleEntity.name} r√©cup√©r√©');
      return (articleEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur article: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(ArticleDetailEntity?, String?)> getArticleDetailById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration d√©tails article $id');
      final articleDetailModel = await remoteDataSource.getArticleDetailById(id);
      final articleDetailEntity = articleDetailModel.toEntity();
      logger.i('‚úÖ Repository: D√©tails article ${articleDetailEntity.name} r√©cup√©r√©s');
      return (articleDetailEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur d√©tails article: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(PaginatedResponseEntity<ArticleEntity>?, String?)> searchArticles({
    required String query,
    int page = 1,
  }) async {
    try {
      logger.d('üì¶ Repository: Recherche articles "$query"');
      final responseModel = await remoteDataSource.searchArticles(
        query: query,
        page: page,
      );
      final responseEntity = responseModel.toEntity(
            (articleModel) => articleModel.toEntity(),
      );
      logger.i('‚úÖ Repository: ${responseEntity.count} articles trouv√©s');
      return (responseEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur recherche: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(List<ArticleEntity>?, String?)> getLowStockArticles() async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration articles stock bas');
      final articlesModel = await remoteDataSource.getLowStockArticles();
      final articlesEntity = articlesModel.map((model) => model.toEntity()).toList();
      logger.i('‚úÖ Repository: ${articlesEntity.length} articles stock bas');
      return (articlesEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur stock bas: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(List<ArticleEntity>?, String?)> getExpiringSoonArticles() async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration articles p√©remption proche');
      final articlesModel = await remoteDataSource.getExpiringSoonArticles();
      final articlesEntity = articlesModel.map((model) => model.toEntity()).toList();
      logger.i('‚úÖ Repository: ${articlesEntity.length} articles p√©remption proche');
      return (articlesEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur p√©remption: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== ARTICLES - CRUD ====================

  @override
  Future<(ArticleDetailEntity?, String?)> createArticle(
      Map<String, dynamic> data,
      String? primaryImagePath,
      List<String>? secondaryImagePaths, // ‚≠ê NOUVEAU param√®tre
      ) async {
    try {
      logger.d(' üîÑ  Repository: Cr√©ation article...');

      // ‚≠ê Passer les images secondaires au datasource
      final articleModel = await remoteDataSource.createArticle(
        data,
        primaryImagePath,
        secondaryImagePaths, // ‚úÖ Nouveau param√®tre
      );

      final articleEntity = articleModel.toEntity();

      logger.i(' ‚úÖ  Repository: Article "${articleEntity.name}" cr√©√© avec succ√®s');

      // Compter les images
      final imageCount = articleEntity.images.length;
      if (imageCount > 0) {
        logger.i('    üì∏ $imageCount image(s) upload√©e(s)');
      }

      return (articleEntity, null);
    } catch (e) {
      final errorMessage = 'Erreur cr√©ation article: ${e.toString()}';
      logger.e(' ‚ùå  Repository Error: $errorMessage');
      return (null, errorMessage);
    }
  }

  @override
  Future<(ArticleDetailEntity?, String?)> updateArticle(
      String id,
      Map<String, dynamic> data,
      String? primaryImagePath,
      List<String>? secondaryImagePaths, // ‚≠ê NOUVEAU param√®tre
      ) async {
    try {
      logger.d(' üîÑ  Repository: Mise √† jour article $id...');

      // ‚≠ê Passer les images secondaires au datasource
      final articleModel = await remoteDataSource.updateArticle(
        id,
        data,
        primaryImagePath,
        secondaryImagePaths, // ‚úÖ Nouveau param√®tre
      );

      final articleEntity = articleModel.toEntity();

      logger.i(' ‚úÖ  Repository: Article "${articleEntity.name}" mis √† jour');

      // Compter les images
      final imageCount = articleEntity.images.length;
      if (imageCount > 0) {
        logger.i('    üì∏ $imageCount image(s) au total');
      }

      return (articleEntity, null);
    } catch (e) {
      final errorMessage = 'Erreur mise √† jour article: ${e.toString()}';
      logger.e(' ‚ùå  Repository Error: $errorMessage');
      return (null, errorMessage);
    }
  }

  @override
  Future<(void, String?)> deleteArticle(String articleId) async {
    try {
      logger.d('üì¶ Repository: Suppression article (ID: $articleId)');
      await remoteDataSource.deleteArticle(articleId);
      logger.i('‚úÖ Repository: Article supprim√© avec succ√®s');
      return (null, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur suppression article: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== CATEGORIES ====================

  @override
  Future<(List<CategoryEntity>?, String?)> getCategories({bool? isActive}) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration cat√©gories');
      final categoriesModel = await remoteDataSource.getCategories(isActive: isActive);
      final categoriesEntity = categoriesModel.map((model) => model.toEntity()).toList();
      logger.i('‚úÖ Repository: ${categoriesEntity.length} cat√©gories r√©cup√©r√©es');
      return (categoriesEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cat√©gories: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(CategoryEntity?, String?)> getCategoryById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration cat√©gorie $id');
      final categoryModel = await remoteDataSource.getCategoryById(id);
      final categoryEntity = categoryModel.toEntity();
      logger.i('‚úÖ Repository: Cat√©gorie ${categoryEntity.name} r√©cup√©r√©e');
      return (categoryEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cat√©gorie: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(CategoryEntity?, String?)> createCategory(Map<String, dynamic> data) async {
    try {
      logger.d('üì¶ Repository: Cr√©ation cat√©gorie "${data['name']}"');
      final categoryModel = await remoteDataSource.createCategory(data);
      final categoryEntity = categoryModel.toEntity();
      logger.i('‚úÖ Repository: Cat√©gorie "${categoryEntity.name}" cr√©√©e');
      return (categoryEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cr√©ation cat√©gorie: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(CategoryEntity?, String?)> updateCategory(String id, Map<String, dynamic> data) async {
    try {
      logger.d('üì¶ Repository: Mise √† jour cat√©gorie $id');
      final categoryModel = await remoteDataSource.updateCategory(id, data);
      final categoryEntity = categoryModel.toEntity();
      logger.i('‚úÖ Repository: Cat√©gorie mise √† jour');
      return (categoryEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur mise √† jour cat√©gorie: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(void, String?)> deleteCategory(String id) async {
    try {
      logger.d('üì¶ Repository: Suppression cat√©gorie $id');
      await remoteDataSource.deleteCategory(id);
      logger.i('‚úÖ Repository: Cat√©gorie supprim√©e');
      return (null, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur suppression cat√©gorie: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== BRANDS ====================

  @override
  Future<(List<BrandEntity>?, String?)> getBrands({bool? isActive}) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration marques');
      final brandsModel = await remoteDataSource.getBrands(isActive: isActive);
      final brandsEntity = brandsModel.map((model) => model.toEntity()).toList();
      logger.i('‚úÖ Repository: ${brandsEntity.length} marques r√©cup√©r√©es');
      return (brandsEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur marques: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(BrandEntity?, String?)> getBrandById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration marque $id');
      final brandModel = await remoteDataSource.getBrandById(id);
      final brandEntity = brandModel.toEntity();
      logger.i('‚úÖ Repository: Marque ${brandEntity.name} r√©cup√©r√©e');
      return (brandEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur marque: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(BrandEntity?, String?)> createBrand(Map<String, dynamic> data, String? logoPath) async {
    try {
      logger.d('üì¶ Repository: Cr√©ation marque "${data['name']}"');
      final brandModel = await remoteDataSource.createBrand(data, logoPath);
      final brandEntity = brandModel.toEntity();
      logger.i('‚úÖ Repository: Marque "${brandEntity.name}" cr√©√©e');
      return (brandEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cr√©ation marque: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(BrandEntity?, String?)> updateBrand(String id, Map<String, dynamic> data, String? logoPath) async {
    try {
      logger.d('üì¶ Repository: Mise √† jour marque $id');
      final brandModel = await remoteDataSource.updateBrand(id, data, logoPath);
      final brandEntity = brandModel.toEntity();
      logger.i('‚úÖ Repository: Marque mise √† jour');
      return (brandEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur mise √† jour marque: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(void, String?)> deleteBrand(String id) async {
    try {
      logger.d('üì¶ Repository: Suppression marque $id');
      await remoteDataSource.deleteBrand(id);
      logger.i('‚úÖ Repository: Marque supprim√©e');
      return (null, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur suppression marque: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== UNITS OF MEASURE ====================

  @override
  Future<(List<UnitOfMeasureEntity>?, String?)> getUnitsOfMeasure({bool? isActive}) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration unit√©s de mesure');
      final unitsModel = await remoteDataSource.getUnitsOfMeasure(isActive: isActive);
      final unitsEntity = unitsModel.map((model) => model.toEntity()).toList();
      logger.i('‚úÖ Repository: ${unitsEntity.length} unit√©s r√©cup√©r√©es');
      return (unitsEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur unit√©s: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(UnitOfMeasureEntity?, String?)> getUnitOfMeasureById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration unit√© $id');
      final unitModel = await remoteDataSource.getUnitOfMeasureById(id);
      final unitEntity = unitModel.toEntity();
      logger.i('‚úÖ Repository: Unit√© ${unitEntity.name} r√©cup√©r√©e');
      return (unitEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur unit√©: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(UnitOfMeasureEntity?, String?)> createUnitOfMeasure(Map<String, dynamic> data) async {
    try {
      logger.d('üì¶ Repository: Cr√©ation unit√© "${data['name']}"');
      final unitModel = await remoteDataSource.createUnitOfMeasure(data);
      final unitEntity = unitModel.toEntity();
      logger.i('‚úÖ Repository: Unit√© "${unitEntity.name}" cr√©√©e');
      return (unitEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cr√©ation unit√©: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(UnitOfMeasureEntity?, String?)> updateUnitOfMeasure(String id, Map<String, dynamic> data) async {
    try {
      logger.d('üì¶ Repository: Mise √† jour unit√© $id');
      final unitModel = await remoteDataSource.updateUnitOfMeasure(id, data);
      final unitEntity = unitModel.toEntity();
      logger.i('‚úÖ Repository: Unit√© mise √† jour');
      return (unitEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur mise √† jour unit√©: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(void, String?)> deleteUnitOfMeasure(String id) async {
    try {
      logger.d('üì¶ Repository: Suppression unit√© $id');
      await remoteDataSource.deleteUnitOfMeasure(id);
      logger.i('‚úÖ Repository: Unit√© supprim√©e');
      return (null, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur suppression unit√©: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== LOCATIONS ====================

  @override
  Future<(List<LocationEntity>?, String?)> getLocations({
    bool? isActive,
    String? locationType,
    String? parentId,
  }) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration emplacements');

      final locationsModel = await remoteDataSource.getLocations(
        isActive: isActive,
        locationType: locationType,
        parentId: parentId,
      );

      final locationsEntity = locationsModel
          .map((model) => model.toEntity())
          .toList();

      logger.i('‚úÖ Repository: ${locationsEntity.length} emplacements r√©cup√©r√©s');

      return (locationsEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur emplacements: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(LocationEntity?, String?)> getLocationById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration emplacement $id');

      final locationModel = await remoteDataSource.getLocationById(id);
      final locationEntity = locationModel.toEntity();

      logger.i('‚úÖ Repository: Emplacement ${locationEntity.name} r√©cup√©r√©');

      return (locationEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur emplacement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(LocationEntity?, String?)> createLocation(Map<String, dynamic> data) async {
    try {
      logger.d('üì¶ Repository: Cr√©ation emplacement "${data['name']}"');

      final locationModel = await remoteDataSource.createLocation(data);
      final locationEntity = locationModel.toEntity();

      logger.i('‚úÖ Repository: Emplacement "${locationEntity.name}" cr√©√©');

      return (locationEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur cr√©ation emplacement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(LocationEntity?, String?)> updateLocation(
      String id,
      Map<String, dynamic> data,
      ) async {
    try {
      logger.d('üì¶ Repository: Mise √† jour emplacement $id');

      final locationModel = await remoteDataSource.updateLocation(id, data);
      final locationEntity = locationModel.toEntity();

      logger.i('‚úÖ Repository: Emplacement mis √† jour');

      return (locationEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur mise √† jour emplacement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(void, String?)> deleteLocation(String id) async {
    try {
      logger.d('üì¶ Repository: Suppression emplacement $id');

      await remoteDataSource.deleteLocation(id);

      logger.i('‚úÖ Repository: Emplacement supprim√©');

      return (null, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur suppression emplacement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(List<StockEntity>?, String?)> getLocationStocks(String locationId) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration stocks emplacement $locationId');

      final stocksModel = await remoteDataSource.getLocationStocks(locationId);
      final stocksEntity = stocksModel.map((model) => model.toEntity()).toList();

      logger.i('‚úÖ Repository: ${stocksEntity.length} stocks r√©cup√©r√©s');

      return (stocksEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur stocks emplacement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== STOCKS ====================

  @override
  Future<(List<StockEntity>?, String?)> getStocks({
    String? articleId,
    String? locationId,
    DateTime? expiryDate,
  }) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration stocks');

      final stocksModel = await remoteDataSource.getStocks(
        articleId: articleId,
        locationId: locationId,
        expiryDate: expiryDate,
      );

      final stocksEntity = stocksModel
          .map((model) => model.toEntity())
          .toList();

      logger.i('‚úÖ Repository: ${stocksEntity.length} stocks r√©cup√©r√©s');

      return (stocksEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur stocks: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(StockEntity?, String?)> getStockById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration stock $id');

      final stockModel = await remoteDataSource.getStockById(id);
      final stockEntity = stockModel.toEntity();

      logger.i('‚úÖ Repository: Stock r√©cup√©r√©');

      return (stockEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur stock: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> adjustStock({
    required String articleId,
    required String locationId,
    required double newQuantity,
    required String reason,
    String? referenceDocument,
    String? notes,
  }) async {
    try {
      logger.d('üì¶ Repository: Ajustement stock');

      final result = await remoteDataSource.adjustStock(
        articleId: articleId,
        locationId: locationId,
        newQuantity: newQuantity,
        reason: reason,
        referenceDocument: referenceDocument,
        notes: notes,
      );

      logger.i('‚úÖ Repository: Ajustement effectu√©');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur ajustement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> transferStock({
    required String articleId,
    required String fromLocationId,
    required String toLocationId,
    required double quantity,
    String? referenceDocument,
    String? notes,
  }) async {
    try {
      logger.d('üì¶ Repository: Transfert stock');

      final result = await remoteDataSource.transferStock(
        articleId: articleId,
        fromLocationId: fromLocationId,
        toLocationId: toLocationId,
        quantity: quantity,
        referenceDocument: referenceDocument,
        notes: notes,
      );

      logger.i('‚úÖ Repository: Transfert effectu√©');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur transfert: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> getStockValuation() async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration valorisation stock');

      final result = await remoteDataSource.getStockValuation();

      logger.i('‚úÖ Repository: Valorisation r√©cup√©r√©e');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur valorisation: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== STOCK ALERTS ====================

  @override
  Future<(List<StockAlertEntity>?, String?)> getStockAlerts({
    String? alertType,
    String? alertLevel,
    bool? isAcknowledged,
  }) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration alertes');

      final alertsModel = await remoteDataSource.getStockAlerts(
        alertType: alertType,
        alertLevel: alertLevel,
        isAcknowledged: isAcknowledged,
      );

      final alertsEntity = alertsModel
          .map((model) => model.toEntity())
          .toList();

      logger.i('‚úÖ Repository: ${alertsEntity.length} alertes r√©cup√©r√©es');

      return (alertsEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur alertes: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(StockAlertEntity?, String?)> getStockAlertById(String id) async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration alerte $id');

      final alertModel = await remoteDataSource.getStockAlertById(id);
      final alertEntity = alertModel.toEntity();

      logger.i('‚úÖ Repository: Alerte r√©cup√©r√©e');

      return (alertEntity, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur alerte: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> acknowledgeAlert(String id) async {
    try {
      logger.d('üì¶ Repository: Acquittement alerte $id');

      final result = await remoteDataSource.acknowledgeAlert(id);

      logger.i('‚úÖ Repository: Alerte acquitt√©e');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur acquittement: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> bulkAcknowledgeAlerts(
      List<String> alertIds,
      ) async {
    try {
      logger.d('üì¶ Repository: Acquittement masse ${alertIds.length} alertes');

      final result = await remoteDataSource.bulkAcknowledgeAlerts(alertIds);

      logger.i('‚úÖ Repository: Alertes acquitt√©es en masse');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur acquittement masse: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> getAlertsDashboard() async {
    try {
      logger.d('üì¶ Repository: R√©cup√©ration dashboard alertes');

      final dashboard = await remoteDataSource.getAlertsDashboard();

      logger.i('‚úÖ Repository: Dashboard r√©cup√©r√©');

      return (dashboard, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur dashboard: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== BULK OPERATIONS ====================

  @override
  Future<(Map<String, dynamic>?, String?)> bulkUpdateArticles(
      BulkUpdateArticlesParams params,
      ) async {
    try {
      logger.d('üì¶ Repository: Op√©ration en masse sur ${params.articleIds.length} articles');

      final result = await remoteDataSource.bulkUpdateArticles(params);

      logger.i('‚úÖ Repository: Op√©ration effectu√©e');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur bulk update: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> duplicateArticle(
      DuplicateArticleParams params,
      ) async {
    try {
      logger.d('üì¶ Repository: Duplication article ${params.articleId}');

      final result = await remoteDataSource.duplicateArticle(params);

      logger.i('‚úÖ Repository: Article dupliqu√©');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur duplication: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(Map<String, dynamic>?, String?)> importArticlesCSV(
      String filePath,
      ) async {
    try {
      logger.d('üì¶ Repository: Import CSV $filePath');

      final result = await remoteDataSource.importArticlesCSV(filePath);

      logger.i('‚úÖ Repository: Import effectu√©');

      return (result, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur import CSV: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  @override
  Future<(String?, String?)> exportArticlesCSV(
      ExportArticlesCSVParams params,
      ) async {
    try {
      logger.d('üì¶ Repository: Export CSV');

      final fileName = await remoteDataSource.exportArticlesCSV(params);

      logger.i('‚úÖ Repository: Export effectu√© - $fileName');

      return (fileName, null);
    } catch (e) {
      final errorMessage = e.toString();
      logger.e('‚ùå Repository: Erreur export CSV: $errorMessage');
      return (null, _extractErrorMessage(errorMessage));
    }
  }

  // ==================== UTILS ====================

  String _extractErrorMessage(String errorMessage) {
    if (errorMessage.contains('DioException')) {
      if (errorMessage.contains('401')) return 'Non autoris√©';
      if (errorMessage.contains('403')) return 'Acc√®s refus√©';
      if (errorMessage.contains('404')) return 'Ressource introuvable';
      if (errorMessage.contains('500')) return 'Erreur serveur';
    }
    return errorMessage;
  }
}