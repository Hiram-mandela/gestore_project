// ========================================
// lib/features/inventory/data/datasources/inventory_remote_datasource.dart
// DataSource pour les appels API du module inventory
// ========================================

import 'package:dio/dio.dart';
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import '../../../../core/network/api_client.dart';
import '../../../../core/constants/api_endpoints.dart';
import '../models/article_model.dart';
import '../models/category_model.dart';
import '../models/brand_model.dart';
import '../models/paginated_response_model.dart';
import '../models/unit_of_measure_model.dart';

/// DataSource abstraite pour les op√©rations d'inventaire
abstract class InventoryRemoteDataSource {
  /// R√©cup√®re la liste pagin√©e des articles
  Future<PaginatedResponseModel<ArticleModel>> getArticles({
    int page = 1,
    int pageSize = 20,
    String? search,
    String? categoryId,
    String? brandId,
    bool? isActive,
    bool? isLowStock,
    String? ordering,
  });

  /// R√©cup√®re un article par ID
  Future<ArticleModel> getArticleById(String id);

  /// Recherche des articles
  Future<PaginatedResponseModel<ArticleModel>> searchArticles({
    required String query,
    int page = 1,
  });

  /// R√©cup√®re les articles avec stock bas
  Future<List<ArticleModel>> getLowStockArticles();

  /// R√©cup√®re les articles proches de la p√©remption
  Future<List<ArticleModel>> getExpiringSoonArticles();

  /// R√©cup√®re toutes les cat√©gories
  Future<List<CategoryModel>> getCategories({bool? isActive});

  /// R√©cup√®re une cat√©gorie par ID
  Future<CategoryModel> getCategoryById(String id);

  /// R√©cup√®re toutes les marques
  Future<List<BrandModel>> getBrands({bool? isActive});

  /// R√©cup√®re une marque par ID
  Future<BrandModel> getBrandById(String id);

  /// R√©cup√®re toutes les unit√©s de mesure
  Future<List<UnitOfMeasureModel>> getUnitsOfMeasure({bool? isActive});
}

/// Impl√©mentation du DataSource avec Dio
@LazySingleton(as: InventoryRemoteDataSource)
class InventoryRemoteDataSourceImpl implements InventoryRemoteDataSource {
  final ApiClient apiClient;
  final Logger logger;

  InventoryRemoteDataSourceImpl({
    required this.apiClient,
    required this.logger,
  });

  @override
  Future<PaginatedResponseModel<ArticleModel>> getArticles({
    int page = 1,
    int pageSize = 20,
    String? search,
    String? categoryId,
    String? brandId,
    bool? isActive,
    bool? isLowStock,
    String? ordering,
  }) async {
    try {
      logger.d('üì¶ R√©cup√©ration articles: page=$page, pageSize=$pageSize');

      // Construire les query parameters
      final queryParams = <String, dynamic>{
        'page': page,
        'page_size': pageSize,
      };

      if (search != null && search.isNotEmpty) {
        queryParams['search'] = search;
      }
      if (categoryId != null) {
        queryParams['category'] = categoryId;
      }
      if (brandId != null) {
        queryParams['brand'] = brandId;
      }
      if (isActive != null) {
        queryParams['is_active'] = isActive;
      }
      if (isLowStock != null) {
        queryParams['is_low_stock'] = isLowStock;
      }
      if (ordering != null) {
        queryParams['ordering'] = ordering;
      }

      final response = await apiClient.get(
        ApiEndpoints.articles,
        queryParameters: queryParams,
      );

      logger.i('‚úÖ Articles r√©cup√©r√©s: ${response.data['count']} total');

      return PaginatedResponseModel.fromJson(
        response.data,
            (json) => ArticleModel.fromJson(json),
      );
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration articles: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<ArticleModel> getArticleById(String id) async {
    try {
      logger.d('üì¶ R√©cup√©ration article: $id');

      final response = await apiClient.get(ApiEndpoints.articleDetail(id));

      logger.i('‚úÖ Article r√©cup√©r√©: ${response.data['name']}');

      return ArticleModel.fromJson(response.data);
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration article: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<PaginatedResponseModel<ArticleModel>> searchArticles({
    required String query,
    int page = 1,
  }) async {
    try {
      logger.d('üîç Recherche articles: "$query"');

      final response = await apiClient.get(
        ApiEndpoints.articles,
        queryParameters: {
          'search': query,
          'page': page,
        },
      );

      logger.i('‚úÖ R√©sultats recherche: ${response.data['count']} trouv√©s');

      return PaginatedResponseModel.fromJson(
        response.data,
            (json) => ArticleModel.fromJson(json),
      );
    } on DioException catch (e) {
      logger.e('‚ùå Erreur recherche articles: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<List<ArticleModel>> getLowStockArticles() async {
    try {
      logger.d('üì¶ R√©cup√©ration articles stock bas');

      final response = await apiClient.get(ApiEndpoints.articlesLowStock);

      final List<dynamic> data = response.data as List<dynamic>;
      logger.i('‚úÖ Articles stock bas: ${data.length} trouv√©s');

      return data
          .map((json) => ArticleModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration stock bas: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<List<ArticleModel>> getExpiringSoonArticles() async {
    try {
      logger.d('üì¶ R√©cup√©ration articles p√©remption proche');

      final response = await apiClient.get(ApiEndpoints.articlesExpiringSoon);

      final List<dynamic> data = response.data as List<dynamic>;
      logger.i('‚úÖ Articles p√©remption proche: ${data.length} trouv√©s');

      return data
          .map((json) => ArticleModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration p√©remption: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<List<CategoryModel>> getCategories({bool? isActive}) async {
    try {
      logger.d('üìÇ R√©cup√©ration cat√©gories');

      final queryParams = <String, dynamic>{};
      if (isActive != null) {
        queryParams['is_active'] = isActive;
      }

      final response = await apiClient.get(
        ApiEndpoints.categories,
        queryParameters: queryParams,
      );

      final List<dynamic> data = response.data as List<dynamic>;
      logger.i('‚úÖ Cat√©gories r√©cup√©r√©es: ${data.length}');

      return data
          .map((json) => CategoryModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration cat√©gories: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<CategoryModel> getCategoryById(String id) async {
    try {
      logger.d('üìÇ R√©cup√©ration cat√©gorie: $id');

      final response = await apiClient.get(ApiEndpoints.categoryDetail(id));

      logger.i('‚úÖ Cat√©gorie r√©cup√©r√©e: ${response.data['name']}');

      return CategoryModel.fromJson(response.data);
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration cat√©gorie: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<List<BrandModel>> getBrands({bool? isActive}) async {
    try {
      logger.d('üè∑Ô∏è R√©cup√©ration marques');

      final queryParams = <String, dynamic>{};
      if (isActive != null) {
        queryParams['is_active'] = isActive;
      }

      final response = await apiClient.get(
        ApiEndpoints.brands,
        queryParameters: queryParams,
      );

      final List<dynamic> data = response.data as List<dynamic>;
      logger.i('‚úÖ Marques r√©cup√©r√©es: ${data.length}');

      return data
          .map((json) => BrandModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration marques: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<BrandModel> getBrandById(String id) async {
    try {
      logger.d('üè∑Ô∏è R√©cup√©ration marque: $id');

      final response = await apiClient.get(ApiEndpoints.brandDetail(id));

      logger.i('‚úÖ Marque r√©cup√©r√©e: ${response.data['name']}');

      return BrandModel.fromJson(response.data);
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration marque: ${e.message}');
      throw _handleDioError(e);
    }
  }

  @override
  Future<List<UnitOfMeasureModel>> getUnitsOfMeasure({bool? isActive}) async {
    try {
      logger.d('üìè R√©cup√©ration unit√©s de mesure');

      final queryParams = <String, dynamic>{};
      if (isActive != null) {
        queryParams['is_active'] = isActive;
      }

      final response = await apiClient.get(
        ApiEndpoints.units,
        queryParameters: queryParams,
      );

      final List<dynamic> data = response.data as List<dynamic>;
      logger.i('‚úÖ Unit√©s de mesure r√©cup√©r√©es: ${data.length}');

      return data
          .map((json) =>
          UnitOfMeasureModel.fromJson(json as Map<String, dynamic>))
          .toList();
    } on DioException catch (e) {
      logger.e('‚ùå Erreur r√©cup√©ration unit√©s: ${e.message}');
      throw _handleDioError(e);
    }
  }

  /// G√®re les erreurs Dio et retourne des messages appropri√©s
  String _handleDioError(DioException error) {
    if (error.response != null) {
      final statusCode = error.response!.statusCode;
      final data = error.response!.data;

      switch (statusCode) {
        case 400:
          return 'Requ√™te invalide: ${data?['detail'] ?? 'Erreur de validation'}';
        case 401:
          return 'Session expir√©e. Veuillez vous reconnecter.';
        case 403:
          return 'Acc√®s refus√©. Permissions insuffisantes.';
        case 404:
          return 'Ressource non trouv√©e.';
        case 500:
          return 'Erreur serveur. Veuillez r√©essayer plus tard.';
        default:
          return 'Erreur r√©seau: ${error.message}';
      }
    }

    if (error.type == DioExceptionType.connectionTimeout ||
        error.type == DioExceptionType.receiveTimeout) {
      return 'D√©lai d\'attente d√©pass√©. V√©rifiez votre connexion.';
    }

    if (error.type == DioExceptionType.connectionError) {
      return 'Impossible de se connecter au serveur.';
    }

    return 'Une erreur est survenue: ${error.message}';
  }
}