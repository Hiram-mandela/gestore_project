// ========================================
// lib/features/authentication/presentation/providers/auth_provider.dart
// VERSION CORRIG√âE - Utilisation de .$1 et .$2 pour les tuples
// ========================================

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logger/logger.dart';

import '../../../../config/dependencies.dart';
import '../../../../core/usecases/usecase.dart';
import '../../domain/entities/user_entity.dart';
import '../../domain/usecases/check_auth_status_usecase.dart';
import '../../domain/usecases/get_current_user_usecase.dart';
import '../../domain/usecases/login_usecase.dart';
import '../../domain/usecases/logout_usecase.dart';
import 'auth_state.dart';

/// Provider pour l'√©tat d'authentification
final authProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  return AuthNotifier(
    loginUseCase: getIt<LoginUseCase>(),
    logoutUseCase: getIt<LogoutUseCase>(),
    getCurrentUserUseCase: getIt<GetCurrentUserUseCase>(),
    checkAuthStatusUseCase: getIt<CheckAuthStatusUseCase>(),
    logger: getIt<Logger>(),
  );
});

/// Notifier pour g√©rer l'√©tat d'authentification
class AuthNotifier extends StateNotifier<AuthState> {
  final LoginUseCase loginUseCase;
  final LogoutUseCase logoutUseCase;
  final GetCurrentUserUseCase getCurrentUserUseCase;
  final CheckAuthStatusUseCase checkAuthStatusUseCase;
  final Logger logger;

  AuthNotifier({
    required this.loginUseCase,
    required this.logoutUseCase,
    required this.getCurrentUserUseCase,
    required this.checkAuthStatusUseCase,
    required this.logger,
  }) : super(const AuthInitial());

  /// V√©rifier l'√©tat d'authentification au d√©marrage
  Future<void> checkAuthStatus() async {
    logger.i('üîç V√©rification √©tat authentification...');

    state = const AuthLoading();

    try {
      final result = await checkAuthStatusUseCase(const NoParams());

      // ‚úÖ CORRECTION: Utiliser .$2 pour l'erreur et .$1 pour les donn√©es
      final error = result.$2;
      final isAuthenticated = result.$1;

      if (error != null) {
        // Il y a une erreur
        logger.e('‚ùå Erreur v√©rification auth: $error');
        state = const AuthUnauthenticated();
      } else if (isAuthenticated == true) {
        // Authentifi√© - Charger l'utilisateur
        logger.i('‚úÖ Utilisateur authentifi√© - Chargement des donn√©es...');
        await _loadCurrentUser();
      } else {
        // Non authentifi√©
        logger.i('‚ÑπÔ∏è Utilisateur non authentifi√©');
        state = const AuthUnauthenticated();
      }
    } catch (e) {
      logger.e('‚ùå Exception v√©rification auth: $e');
      state = const AuthUnauthenticated();
    }
  }

  /// Charger l'utilisateur actuel
  Future<void> _loadCurrentUser() async {
    try {
      final result = await getCurrentUserUseCase(const NoParams());

      // ‚úÖ CORRECTION: Utiliser .$2 pour l'erreur et .$1 pour les donn√©es
      final error = result.$2;
      final user = result.$1;

      if (error != null) {
        logger.e('‚ùå Erreur chargement utilisateur: $error');
        state = const AuthUnauthenticated();
      } else if (user != null) {
        logger.i('‚úÖ Utilisateur charg√©: ${user.username}');
        state = AuthAuthenticated(user: user);
      } else {
        logger.w('‚ö†Ô∏è Aucun utilisateur retourn√©');
        state = const AuthUnauthenticated();
      }
    } catch (e) {
      logger.e('‚ùå Exception chargement utilisateur: $e');
      state = const AuthUnauthenticated();
    }
  }

  /// Se connecter
  Future<void> login({
    required String username,
    required String password,
  }) async {
    logger.i('üîê Tentative de connexion pour: $username');

    state = const AuthLoading();

    try {
      final params = LoginParams(username: username, password: password);
      final result = await loginUseCase(params);

      // ‚úÖ CORRECTION: Utiliser .$2 pour l'erreur et .$1 pour les donn√©es
      final error = result.$2;
      final user = result.$1;

      if (error != null) {
        // Il y a une erreur
        logger.e('‚ùå Erreur connexion: $error');
        state = AuthError(message: error);

        // Revenir √† unauthenticated apr√®s 3 secondes
        await Future.delayed(const Duration(seconds: 3));
        if (state is AuthError) {
          state = const AuthUnauthenticated();
        }
      } else if (user != null) {
        // Connexion r√©ussie
        logger.i('‚úÖ Connexion r√©ussie pour ${user.username}');
        state = AuthAuthenticated(user: user);
      } else {
        // Cas improbable mais possible
        logger.w('‚ö†Ô∏è Connexion sans utilisateur ni erreur');
        state = const AuthError(message: 'Erreur inconnue lors de la connexion');

        await Future.delayed(const Duration(seconds: 3));
        if (state is AuthError) {
          state = const AuthUnauthenticated();
        }
      }
    } catch (e) {
      logger.e('‚ùå Exception connexion: $e');
      state = AuthError(message: 'Une erreur inattendue est survenue');

      await Future.delayed(const Duration(seconds: 3));
      if (state is AuthError) {
        state = const AuthUnauthenticated();
      }
    }
  }

  /// Se d√©connecter
  Future<void> logout() async {
    logger.i('üö™ D√©connexion...');

    state = const AuthLoading();

    try {
      final result = await logoutUseCase(const NoParams());

      // ‚úÖ CORRECTION: Utiliser .$2 pour l'erreur
      final error = result.$2;

      if (error != null) {
        logger.e('‚ùå Erreur d√©connexion: $error');
        // Mais on d√©connecte quand m√™me localement
      }

      logger.i('‚úÖ D√©connexion r√©ussie');
      state = const AuthUnauthenticated();
    } catch (e) {
      logger.e('‚ùå Exception d√©connexion: $e');
      // D√©connexion locale quand m√™me
      state = const AuthUnauthenticated();
    }
  }

  /// Rafra√Æchir l'utilisateur actuel
  Future<void> refreshUser() async {
    if (state is! AuthAuthenticated) {
      logger.w('‚ö†Ô∏è Impossible de rafra√Æchir - non authentifi√©');
      return;
    }

    logger.d('üîÑ Rafra√Æchissement utilisateur...');

    try {
      final result = await getCurrentUserUseCase(const NoParams());

      // ‚úÖ CORRECTION: Utiliser .$2 pour l'erreur et .$1 pour les donn√©es
      final error = result.$2;
      final user = result.$1;

      if (error != null) {
        logger.e('‚ùå Erreur rafra√Æchissement: $error');
        // Garder l'√©tat actuel
      } else if (user != null) {
        logger.i('‚úÖ Utilisateur rafra√Æchi: ${user.username}');
        state = AuthAuthenticated(user: user);
      }
    } catch (e) {
      logger.e('‚ùå Exception rafra√Æchissement: $e');
      // Garder l'√©tat actuel
    }
  }

  /// R√©initialiser l'√©tat d'erreur
  void clearError() {
    if (state is AuthError) {
      logger.d('üßπ Nettoyage de l\'erreur');
      state = const AuthUnauthenticated();
    }
  }

  /// Obtenir l'utilisateur actuel (si authentifi√©)
  UserEntity? get currentUser {
    final currentState = state;
    if (currentState is AuthAuthenticated) {
      return currentState.user;
    }
    return null;
  }

  /// V√©rifier si l'utilisateur est authentifi√©
  bool get isAuthenticated {
    return state is AuthAuthenticated;
  }

  /// V√©rifier si en cours de chargement
  bool get isLoading {
    return state is AuthLoading;
  }
}


/// Provider pour l'utilisateur actuel
final currentUserProvider = Provider<UserEntity?>((ref) {
  final authState = ref.watch(authProvider);
  if (authState is AuthAuthenticated) {
    return authState.user;
  }
  return null;
});

/// Provider pour savoir si l'utilisateur est authentifi√©
final isAuthenticatedProvider = Provider<bool>((ref) {
  final authState = ref.watch(authProvider);
  return authState is AuthAuthenticated;
});